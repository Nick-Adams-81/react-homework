{"version":3,"sources":["components/EmployeeCard/index.js","components/Footer/index.js","components/Title/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","name","position","salary","onClick","removeEmployee","id","type","class","Footer","Title","children","Wrapper","App","state","employees","filter","employee","setState","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u2BA8BeA,MA3Bf,SAAsBC,GAClB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,WACX,4BACI,4BACI,yCADJ,IAC4BD,EAAME,MAElC,4BACI,6CADJ,IACgCF,EAAMG,UAEtC,4BACI,2CADJ,IAC8BH,EAAMI,UAM5C,4BAAQC,QAAS,kBAAML,EAAMM,eAAeN,EAAMO,KAC9CA,GAAG,SACHC,KAAK,SACLC,MAAM,iBAHV,iB,MCVGC,MARf,WACI,OACI,4BAAQT,UAAU,UACd,sD,MCGGU,MANf,SAAeX,GACX,OAAQ,wBAAIS,MAAM,YAAYR,UAAU,SAASD,EAAMY,W,MCG5CC,MAJf,SAAiBb,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMY,W,OCoC5BE,G,kNA/BbC,MAAQ,CACNC,a,EAIJV,eAAiB,SAAAC,GACf,IAAMS,EAAY,EAAKD,MAAMC,UAAUC,QAAO,SAAAC,GAAQ,OAAIA,EAASX,KAAOA,KAC1E,EAAKY,SAAS,CAAEH,e,uDAGN,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,2BACCI,KAAKL,MAAMC,UAAUK,KAAI,SAAAH,GAAQ,OAChC,kBAAC,EAAD,CACAZ,eAAgB,EAAKA,eACrBC,GAAIW,EAASX,GACbe,IAAKJ,EAASX,GACdL,KAAMgB,EAAShB,KACfC,SAAUe,EAASf,SACnBC,OAAQc,EAASd,YAGnB,kBAAC,EAAD,W,GAzBUmB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.15b17589.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"content\">\n                <ul>\n                    <li>\n                        <strong>Name:</strong> {props.name}\n                    </li>\n                    <li>\n                        <strong>Position:</strong> {props.position}\n                    </li>\n                    <li>\n                        <strong>Salary:</strong> {props.salary}\n                    </li>\n                </ul>\n\n            </div>\n\n            <button onClick={() => props.removeEmployee(props.id)}\n                id=\"remove\"\n                type=\"button\"\n                class=\"btn btn-light\">Remove here\n            </button>\n        </div>\n    );\n}\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <span>Employee Directory</span>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n    return  <h1 class=\"display-4\" className=\"title\">{props.children}</h1>\n\n    \n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport Footer from \"./components/Footer\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport employees from \"./employee.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    employees\n  };\n  \n\nremoveEmployee = id => {\n  const employees = this.state.employees.filter(employee => employee.id !== id);\n  this.setState({ employees })\n}\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee Directory</Title>\n        {this.state.employees.map(employee => (\n          <EmployeeCard\n          removeEmployee={this.removeEmployee}\n          id={employee.id}\n          key={employee.id}\n          name={employee.name}\n          position={employee.position}\n          salary={employee.salary}\n          />\n        ))}\n        <Footer />\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}